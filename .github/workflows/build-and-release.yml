name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Test
      run: go test -v ./...
    
    - name: Build
      run: go build -v ./...
    
    - name: Vet
      run: go vet ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        BINARY_NAME="minecraft-instance-manager"
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        OUTPUT_PATH="dist/${BINARY_NAME}-${{ matrix.os }}-${{ matrix.arch }}"
        if [ "${{ matrix.os }}" = "windows" ]; then
          OUTPUT_PATH="${OUTPUT_PATH}.exe"
        fi
        
        mkdir -p dist
        go build -ldflags="-s -w" -o "${OUTPUT_PATH}" ./cmd/minecraft-instance-manager
        
        # Create archive
        if [ "${{ matrix.os }}" = "windows" ]; then
          cd dist && zip "${BINARY_NAME}-${{ matrix.os }}-${{ matrix.arch }}.zip" "${BINARY_NAME}-${{ matrix.os }}-${{ matrix.arch }}.exe"
        else
          cd dist && tar -czf "${BINARY_NAME}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" "${BINARY_NAME}-${{ matrix.os }}-${{ matrix.arch }}"
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: minecraft-instance-manager-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          dist/*.tar.gz
          dist/*.zip
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        ls -la release-assets/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-')
    
    steps:
    - name: Extract version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: minecraft-instance-manager
        formula-path: Formula/minecraft-instance-manager.rb
        homebrew-tap: Gerry3010/homebrew-tap
        download-url: https://github.com/${{ github.repository }}/archive/refs/tags/v${{ env.VERSION }}.tar.gz
        commit-message: |
          Update minecraft-instance-manager to v${{ env.VERSION }}
          
          Generated by GitHub Actions
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}