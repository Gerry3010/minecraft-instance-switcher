name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

# Add permissions for the workflow to create releases
permissions:
  contents: write  # Required to create releases and upload assets
  packages: write  # Required for package publishing (if needed)
  actions: read    # Required to read workflow artifacts

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Test
      run: go test -v ./...
    
    - name: Build
      run: go build -v ./...
    
    - name: Vet
      run: go vet ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        BINARY_NAME="minecraft-instance-manager"
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        mkdir -p dist
        go build -ldflags="-s -w" -o "dist/${BINARY_NAME}" ./cmd/minecraft-instance-manager
        
        # Create archive with proper naming
        cd dist
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip "minecraft-instance-manager-${{ matrix.os }}-${{ matrix.arch }}.zip" "${BINARY_NAME}"
        else
          tar -czf "minecraft-instance-manager-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" "${BINARY_NAME}"
        fi
        
        # Clean up the individual binary to avoid confusion
        rm "${BINARY_NAME}"
        
        # Debug: List what we created
        ls -la
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: minecraft-instance-manager-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          dist/minecraft-instance-manager-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          dist/minecraft-instance-manager-${{ matrix.os }}-${{ matrix.arch }}.zip
        retention-days: 30
        if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write  # Explicitly grant write access to repository contents
      actions: read    # Read access to download artifacts
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Debug: Show what we downloaded
        echo "Downloaded artifacts:"
        find artifacts -type f -name "*.tar.gz" -o -name "*.zip" | sort
        
        # Copy archives to release assets
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        
        # Debug: Show final release assets
        echo "Release assets:"
        ls -la release-assets/
        
        # Test a few archives to ensure they contain the binary directly
        echo "Testing archive contents:"
        for archive in release-assets/*.tar.gz; do
          if [ -f "$archive" ]; then
            echo "Contents of $(basename "$archive"):"
            tar -tzf "$archive" | head -5
          fi
        done
        for archive in release-assets/*.zip; do
          if [ -f "$archive" ]; then
            echo "Contents of $(basename "$archive"):"
            unzip -l "$archive" | head -10
          fi
        done
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
